generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum user_role {
  admin
  siswa
}

enum school_major {
  ips
  ipa
}

enum assessment_type {
  asesmen_kesiapan_belajar
  asesmen_akhir
}

enum learning_material_type {
  prerequisite
  sub_material
}

enum domain_tag {
  bil
  alj
  geo
  pgk
  adp
  kal
}

enum taxonomy_bloom {
  c1
  c2
  c3
  c4
  c5
  c6
}

model user {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String        @db.VarChar(256)
  email        String        @unique @db.VarChar(256)
  major        school_major?
  avatar_url   String        @db.VarChar(256)
  access_token String?       @db.VarChar(2048)
  role         user_role
  created_at   DateTime      @default(now()) @db.Timestamptz()

  learning_journeys learning_journey[]
}

model learning_journey {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user        user     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_id     String   @db.Uuid
  material    material @relation(fields: [material_id], references: [id], onUpdate: Cascade, onDelete: Restrict)
  material_id String   @db.Uuid

  assessment_results         assessment_result[]
  studied_learning_materials studied_learning_material[]

  @@unique([user_id, material_id])
}

model studied_learning_material {
  learning_journey     learning_journey  @relation(fields: [learning_journey_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  learning_journey_id  String            @db.Uuid
  learning_material    learning_material @relation(fields: [learning_material_id], references: [id], onUpdate: Cascade, onDelete: Restrict)
  learning_material_id String            @db.Uuid
  is_studied           Boolean           @db.Boolean

  @@id([learning_journey_id, learning_material_id])
}

model domain {
  id   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String     @db.VarChar(256)
  tag  domain_tag

  materials domain_material[]
}

model domain_material {
  domain          domain   @relation(fields: [domain_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  domain_id       String   @db.Uuid
  material        material @relation(fields: [material_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  material_id     String   @db.Uuid
  material_number Int      @db.SmallInt

  @@id([domain_id, material_id])
  @@unique([domain_id, material_number])
}

model material {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String @db.VarChar(256)
  description String @db.Text

  domains            domain_material[]
  learning_materials material_learning_material[]
  learning_journeys  learning_journey[]
  question           material_question[]
}

model material_learning_material {
  material                 material               @relation(fields: [material_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  material_id              String                 @db.Uuid
  learning_material        learning_material      @relation(fields: [learning_material_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  learning_material_id     String                 @db.Uuid
  learning_material_type   learning_material_type
  learning_material_number Int                    @db.SmallInt

  @@id([material_id, learning_material_id])
  @@unique([material_id, learning_material_type, learning_material_number])
}

model learning_material {
  id                  String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String @db.VarChar(256)
  description         String @db.Text
  learning_module_url String @db.VarChar(256)

  materials                   material_learning_material[]
  questions                   material_question[]
  studied_learning_materials  studied_learning_material[]
  assessed_learning_materials assessed_learning_material[]
}

model material_question {
  material             material          @relation(fields: [material_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  material_id          String            @db.Uuid
  learning_material    learning_material @relation(fields: [learning_material_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  learning_material_id String            @db.Uuid
  question             question          @relation(fields: [question_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  question_id          String            @db.Uuid

  @@id([material_id, question_id])
  @@unique([learning_material_id, question_id])
}

model question {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content        String         @db.Text
  explanation    String         @db.Text
  taxonomy_bloom taxonomy_bloom

  learning_materials   material_question[]
  multiple_choice      multiple_choice[]
  assessment_responses assessment_response[]
}

model multiple_choice {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String   @db.Text
  is_correct  Boolean  @db.Boolean
  question    question @relation(fields: [question_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  question_id String   @db.Uuid
}

model assessment_result {
  id                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  learning_journey    learning_journey @relation(fields: [learning_journey_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  learning_journey_id String           @db.Uuid
  type                assessment_type
  attempt             Int              @db.SmallInt
  score               Int              @db.SmallInt
  created_at          DateTime         @default(now()) @db.Timestamptz()

  assessed_learning_materials assessed_learning_material[]
}

model assessed_learning_material {
  id                   String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assessment_result    assessment_result @relation(fields: [assessment_result_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  assessment_result_id String            @db.Uuid
  learning_material    learning_material @relation(fields: [learning_material_id], references: [id], onUpdate: Cascade, onDelete: Restrict)
  learning_material_id String            @db.Uuid

  assessment_responses assessment_response[]

  @@unique([assessment_result_id, learning_material_id])
}

model assessment_response {
  assessed_learning_material    assessed_learning_material @relation(fields: [assessed_learning_material_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  assessed_learning_material_id String                     @db.Uuid
  question                      question                   @relation(fields: [question_id], references: [id], onUpdate: Cascade, onDelete: Restrict)
  question_id                   String                     @db.Uuid
  is_correct                    Boolean                    @db.Boolean

  @@id([assessed_learning_material_id, question_id])
}
